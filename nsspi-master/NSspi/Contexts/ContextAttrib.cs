using System;

namespace NSspi.Contexts
{
    /// <summary>
    /// Определяет параметры для создания контекста безопасности через win32 InitializeSecurityContext
    /// (используется клиентами) и AcceptSecurityContext (используется серверами).
    /// Обязательные флаги атрибутов указываются при создании контекста. InitializeSecurityContext
    /// и AcceptSecurityContext возвращает значение, указывающее, какие окончательные атрибуты созданы для контекста.
    /// на самом деле имеет. 
    /// </summary>
    [Flags]
    public enum ContextAttrib : int
    {
        /// <summary>
        /// Никаких дополнительных атрибутов не предусмотрено. 
        /// </summary>
        Zero = 0,

        /// <summary>
        /// Сервер может использовать контекст для аутентификации на других серверах в качестве клиента. В
        /// Флаг MutualAuth должен быть установлен, чтобы этот флаг работал. Действительно для Kerberos. Игнорировать этот флаг для
        /// ограниченное делегирование. 
        /// </summary>
        Delegate = 0x00000001,

        /// <summary>
        /// Политика взаимной аутентификации службы будет удовлетворена.
        /// * Внимание * - это не обязательно означает, что выполняется взаимная аутентификация, только то, что
        /// политика аутентификации службы удовлетворена. Чтобы обеспечить взаимную аутентификацию
        /// выполняется запрос атрибутов контекста после его создания. 
        /// </summary>
        MutualAuth = 0x00000002,

        /// <summary>
        /// Обнаружение воспроизводимых сообщений, которые были закодированы с помощью EncryptMessage или MakeSignature.
        /// функция поддержки сообщений. 
        /// </summary>
        ReplayDetect = 0x00000004,

        /// <summary>
        /// Обнаружение сообщений, полученных не по порядку, при использовании функции поддержки сообщений.
        /// Этот флаг подразумевает все условия, указанные в флаге целостности - неупорядоченная последовательность
        /// обнаружению можно доверять только в том случае, если целостность любого основного механизма обнаружения последовательности
        /// в передаваемых данных можно доверять. 
        /// </summary>
        SequenceDetect = 0x00000008,

        // Контекст должен защищать данные во время передачи.
        // Конфиденциальность поддерживается для NTLM с Microsoft
        // Windows NT версии 4.0, SP4 и выше и с
        // Протокол Kerberos в Microsoft Windows 2000 и новее. 

        /// <summary>
        /// Контекст должен защищать данные во время передачи. Шифруйте сообщения с помощью функции EncryptMessage. 
        /// </summary>
        Confidentiality = 0x00000010,

        /// <summary>
        /// Необходимо согласовать новый сеансовый ключ.
        /// Это значение поддерживается только пакетом безопасности Kerberos. 
        /// </summary>
        UseSessionKey = 0x00000020,

        /// <summary>
        /// Пакет безопасности выделяет для вас выходные буферы. Буферы, выделенные пакетом безопасности, имеют
        /// будет освобождено функциями управления контекстной памятью. 
        /// </summary>
        AllocateMemory = 0x00000100,

        /// <summary>
        /// Контекст безопасности не обрабатывает сообщения форматирования. Это значение по умолчанию для Kerberos,
        /// Negotiate и пакетов безопасности NTLM. 
        /// </summary>
        Connection = 0x00000800,

        /// <summary>
        ///При возникновении ошибок удаленная сторона будет уведомлена.
        /// </summary>
        /// <remarks>
        /// Клиент указывает InitExtendedError в InitializeSecurityContext
        /// и сервер указывает AcceptExtendedError в AcceptSecurityContext.
        /// </remarks>
        InitExtendedError = 0x00004000,

        /// <summary>
        /// При возникновении ошибок удаленная сторона будет уведомлена.
        /// </summary>
        /// <remarks>
        /// Клиент указывает InitExtendedError в InitializeSecurityContext
        /// и сервер указывает AcceptExtendedError в AcceptSecurityContext. 
        /// </remarks>
        AcceptExtendedError = 0x00008000,

        /// <summary>
        /// Поддержка потокового подключения. Предоставляется клиентами.
        /// </summary>
        InitStream = 0x00008000,

        /// <summary>
        /// Поддержка потокового подключения. Предоставляется серверами. 
        /// </summary>
        AcceptStream = 0x00010000,

        /// <summary>
        /// Подписывайте сообщения и проверяйте подписи с помощью функций EncryptMessage и MakeSignature.
        /// Повторно воспроизведенные и неупорядоченные сообщения не будут обнаружены при установке этого атрибута.
        /// Установите ReplayDetect и SequenceDetect также, если это поведение желательно. 
        /// </summary>
        InitIntegrity = 0x00010000,

        /// <summary>
        /// Подписывайте сообщения и проверяйте подписи с помощью функций EncryptMessage и MakeSignature.
        /// Повторно воспроизведенные и неупорядоченные сообщения не будут обнаружены при установке этого атрибута.
        /// Установите ReplayDetect и SequenceDetect также, если это поведение желательно. 
        /// </summary>
        AcceptIntegrity = 0x00020000,

        /// <summary>
        /// Устанавливается клиентом; указывает, что контекст может олицетворять только с ограниченными привилегиями,
        /// разрешая серверу только идентифицировать клиента при олицетворении. 
        /// </summary>
        InitIdentify = 0x00020000,

        /// <summary>
        /// Устанавливается сервером; указывает, что контекст может олицетворять только с ограниченными привилегиями,
        /// разрешая серверу только идентифицировать клиента при олицетворении. 
        /// </summary>
        AcceptIdentify = 0x00080000,

        /// <summary>
        /// Соединение с поставщиком Schannel получает указание не аутентифицировать сервер автоматически. 
        /// </summary>
        InitManualCredValidation = 0x00080000,

        /// <summary>
        /// Соединение с поставщиком Schannel получает указание не аутентифицировать клиента автоматически. 
        /// </summary>
        InitUseSuppliedCreds = 0x00000080,
    }
}